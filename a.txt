diff --git a/.vscode/settings.json b/.vscode/settings.json
index 67c1339..d5ac613 100644
--- a/.vscode/settings.json
+++ b/.vscode/settings.json
@@ -4,8 +4,6 @@
         "ip.h": "c",
         "tcp_tput.h": "c",
         "unistd.h": "c",
-        "socket.h": "c",
-        "in.h": "c",
-        "if.h": "c"
+        "socket.h": "c"
     }
 }
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 2ad629f..ed36cd1 100644
--- a/Makefile
+++ b/Makefile
@@ -1,13 +1,10 @@
 APPS	:= client server
 CFLAGS	:= -g3
-LD		:= gcc
-LDFLAGS	:= ${LDFLAGS} -lpthread
 
 all: $(APPS)
 
 client: client.c tcp_tput.h
-	$(LD) $(CFLAGS) -o $@ $^ $(LDFLAGS)
 server: server.c tcp_tput.h
-	$(LD) $(CFLAGS) -o $@ $^ $(LDFLAGS)
+
 clean:
 	rm $(APPS)
\ No newline at end of file
diff --git a/client.c b/client.c
index 64451b0..74f4c68 100644
--- a/client.c
+++ b/client.c
@@ -1,70 +1,52 @@
 #include "tcp_tput.h"
 
+#include <time.h>
+#include <unistd.h>
+#include <stdio.h>
+#include <string.h>
+#include <sys/socket.h>
+#include <netinet/in.h>
+#include <netinet/ip.h>
+#include <arpa/inet.h>
+
 char buffer[BLK_SIZE];
+int main() {
+    int sock_fd;
+    sock_fd = socket(AF_INET, SOCK_STREAM, 0);
 
-pthread_t workers[NUM_THREADS];
+    struct sockaddr_in server;
+    server.sin_addr.s_addr = inet_addr(SERVER_ADDR);
+    server.sin_family = AF_INET;
+    server.sin_port = htons(SERVER_PORT);
 
-void *flood(void *conn_fd_p) {
-    int conn_fd = *(int*)conn_fd_p;
-    memset(buffer, 'v', sizeof(buffer));
-    for (long long i=0;i!=BLK_CNT;++i) {
-        if (i*100/BLK_CNT != (i-1)*100/BLK_CNT) {
-            printf("thread: %d: %lld%%\n", 0, i*100/BLK_CNT);
-        }
-        write(conn_fd, buffer, BLK_SIZE);
+    if (connect(sock_fd, (struct sockaddr*)&server, sizeof(server)) < 0) {
+        puts("connection failed");
+        return -1;
     }
-    printf("thread %d: Transmission done.", 0);
 
-    read(conn_fd, buffer, 2);
-    if (buffer[0]=='O' && buffer[1]=='K') {
-        printf("thread %d: ACK received.", 0);
-    } else {
-        printf("thread %d: ACK error", 0);
-    }
-    close(conn_fd);
-    free(conn_fd_p);
-    return NULL;
-}
+    puts("Successfully connected server.");
 
-int main() {
     clock_t start = clock();
-    for (int i=0;i!=NUM_THREADS;++i) {
-        if (fork()==0) {
-            int sock_fd;
-            sock_fd = socket(AF_INET, SOCK_STREAM, 0);
-
-    //        struct ifreq ifr;
-    //
-    //        memset(&ifr, 0, sizeof(ifr));
-    //        snprintf(ifr.ifr_name, sizeof(ifr.ifr_name), "enp94s0f0");
-    //        if (setsockopt(sock_fd, SOL_SOCKET, SO_BINDTODEVICE, (void *)&ifr, sizeof(ifr)) < 0) {
-    //            return -1;
-    //        }
 
-            struct sockaddr_in server;
-            server.sin_addr.s_addr = inet_addr(SERVER_ADDR);
-            server.sin_family = AF_INET;
-            server.sin_port = htons(SERVER_PORT+i);
-            if (connect(sock_fd, (struct sockaddr *)&server, sizeof(server)) < 0) {
-                puts("connection failed");
-                return -1;
-            }
-
-            printf("Thread %d Successfully connected server.", i);
-
-            int *conn_fd = malloc(1);
-            *conn_fd = sock_fd;
-            flood(conn_fd);
-            return 0;
+    memset(buffer, 'a', sizeof(buffer));
+    for (long long i=0;i!=BLK_CNT;++i) {
+        if (i*100/BLK_CNT != (i-1)*100/BLK_CNT) {
+            printf("%lld%%\n", i*100/BLK_CNT);
         }
+        write(sock_fd, buffer, BLK_SIZE);
     }
-    for (int i=0;i!=NUM_THREADS;++i) {
-        int status;
-        wait(&status);
-    }
-    double total_time = 1.0 * (clock() - start) / CLOCKS_PER_SEC;
-    double tput = NUM_THREADS * BLK_CNT * BLK_SIZE / total_time;
-    printf("Throughput: %.3lf Gbps\n", tput * 8 / (1ll << 30));
+    puts("Transmission done.");
 
+    read(sock_fd, buffer, 2);
+    if (buffer[0]=='O' && buffer[1]=='K') {
+        double total_time = 1.0 * (clock() - start) / CLOCKS_PER_SEC;
+        double tput = 1.0 * BLK_SIZE * BLK_CNT / total_time;
+        puts("ACK received.");
+        printf("Throughput: %.3lf Gbps\n", tput*8/(1ll<<30));
+
+    } else {
+        puts("ACK error");
+    }
+    close(sock_fd);
     return 0;
 }
\ No newline at end of file
diff --git a/client_threading.c b/client_threading.c
deleted file mode 100644
index 5ec770f..0000000
--- a/client_threading.c
+++ /dev/null
@@ -1,79 +0,0 @@
-#include "tcp_tput.h"
-
-#include <net/if.h>
-#include <stdlib.h>
-#include <pthread.h>
-#include <time.h>
-#include <unistd.h>
-#include <stdio.h>
-#include <string.h>
-#include <sys/socket.h>
-#include <netinet/in.h>
-#include <netinet/ip.h>
-#include <arpa/inet.h>
-
-char buffer[BLK_SIZE];
-
-pthread_t workers[NUM_THREADS];
-
-void *flood(void *conn_fd_p) {
-    int conn_fd = *(int*)conn_fd_p;
-    memset(buffer, 'a', sizeof(buffer));
-    for (long long i=0;i!=BLK_CNT;++i) {
-        if (i*100/BLK_CNT != (i-1)*100/BLK_CNT) {
-            printf("thread: %d: %lld%%\n", 0, i*100/BLK_CNT);
-        }
-        write(conn_fd, buffer, BLK_SIZE);
-    }
-    printf("thread %d: Transmission done.", 0);
-
-    read(conn_fd, buffer, 2);
-    if (buffer[0]=='O' && buffer[1]=='K') {
-        printf("thread %d: ACK received.", 0);
-    } else {
-        printf("thread %d: ACK error", 0);
-    }
-    close(conn_fd);
-    free(conn_fd_p);
-    return NULL;
-}
-
-int main() {
-    clock_t start = clock();
-    for (int i=0;i!=NUM_THREADS;++i) {
-        int sock_fd;
-        sock_fd = socket(AF_INET, SOCK_STREAM, 0);
-
-        struct ifreq ifr;
-
-        memset(&ifr, 0, sizeof(ifr));
-        snprintf(ifr.ifr_name, sizeof(ifr.ifr_name), "enp94s0f0");
-        if (setsockopt(sock_fd, SOL_SOCKET, SO_BINDTODEVICE, (void *)&ifr, sizeof(ifr)) < 0) {
-            return -1;
-        }
-
-        struct sockaddr_in server;
-        server.sin_addr.s_addr = inet_addr(SERVER_ADDR);
-        server.sin_family = AF_INET;
-        server.sin_port = htons(SERVER_PORT+i);
-
-        if (connect(sock_fd, (struct sockaddr *)&server, sizeof(server)) < 0) {
-            puts("connection failed");
-            return -1;
-        }
-
-        printf("Thread %d Successfully connected server.", i);
-
-        int *conn_fd = malloc(1);
-        *conn_fd = sock_fd;
-        pthread_create(&workers[i], NULL, flood, conn_fd);
-    }
-    for (int i=0;i!=NUM_THREADS;++i) {
-        pthread_join(workers[i], NULL);
-    }
-    double total_time = 1.0 * (clock() - start) / CLOCKS_PER_SEC;
-    double tput = NUM_THREADS * BLK_CNT * BLK_SIZE / total_time;
-    printf("Throughput: %.3lf Gbps\n", tput * 8 / (1ll << 30));
-
-    return 0;
-}
\ No newline at end of file
diff --git a/server.c b/server.c
index 0dd9ca5..cd66eaa 100644
--- a/server.c
+++ b/server.c
@@ -1,92 +1,72 @@
 #include "tcp_tput.h"
 
-int conn_fd[NUM_THREADS], sockfd[NUM_THREADS];
+#include <stdlib.h>
+#include <signal.h>
+#include <errno.h>
+#include <unistd.h>
+#include <stdio.h>
+#include <string.h>
+#include <sys/socket.h>
+#include <netinet/in.h>
+#include <netinet/ip.h>
+#include <arpa/inet.h>
+
+int conn_fd, sockfd;
 char buffer[BLK_SIZE]; 
 
 void sigint_handler() {
-    for (int i=0;i!=NUM_THREADS;++i) {
-        close(conn_fd[i]);
-        close(sockfd[i]);
-    }
+    close(conn_fd);
+    close(sockfd);
     printf("server shutting down\n");
     exit(0);
 }
 
-pthread_t workers[NUM_THREADS];
-
-void *serve(void *conn_fd_p) {
-    int conn_fd = *(int*)conn_fd_p;
-    long long cnt = 0, len;
-
-    while (cnt < BLK_CNT * BLK_SIZE)
-    {
-        len = read(conn_fd, buffer, BLK_SIZE);
-        // write(STDOUT_FILENO, buffer, len);
-        cnt += len;
-    }
-    write(conn_fd, "OK", 2);
-    printf("transmission done\n");
-    close(conn_fd);
-    printf("connection done\n");
-}
-
 int main() {
+    
+    // signal(SIGINT, sigint_handler);
 
-    signal(SIGINT, sigint_handler);
-
-    for (int i=0;i!=NUM_THREADS;++i) {
-        pid_t tid;
-        if ((tid=fork()) == 0) {
-            sockfd[i] = socket(AF_INET, SOCK_STREAM, 0);
-            int reuse_addr_value = 1;
-            setsockopt(sockfd[i], SOL_SOCKET, SO_REUSEADDR, &reuse_addr_value, 1);
-
-            // struct ifreq ifr;
-
-            // memset(&ifr, 0, sizeof(ifr));
-            // snprintf(ifr.ifr_name, sizeof(ifr.ifr_name), "enp94s0f0");
-            // if (setsockopt(sockfd[i], SOL_SOCKET, SO_BINDTODEVICE, (void *)&ifr, sizeof(ifr)) < 0) {
-            //     printf("Error: %s\n", strerror(errno));
-            //     return -1;
-            // }
-
-            struct sockaddr_in server;
-            server.sin_addr.s_addr = inet_addr(SERVER_ADDR);
-            server.sin_family = AF_INET;
-            server.sin_port = htons(SERVER_PORT + i);
-
-            if (bind(sockfd[i], (struct sockaddr *)&server, sizeof(server)) < 0) {
-                puts("bind failed");
-                printf("Error: %s\n", strerror(errno));
-                return -1;
-            }
-
-            puts("Successfully binded");
+    sockfd = socket(AF_INET, SOCK_STREAM, 0);
+    int reuse_addr_value = 1;
+    setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &reuse_addr_value, 4);
 
-            listen(sockfd[i], 1);
-            char s[20];
+    struct sockaddr_in server;
+    server.sin_addr.s_addr = inet_addr(SERVER_ADDR);
+    server.sin_family = AF_INET;
+    server.sin_port = htons(SERVER_PORT);
 
-            int client_size;
-            struct sockaddr_in client_addr;
-            client_size = sizeof(client_addr);
-            if ((conn_fd[i] = accept(sockfd[i], (struct sockaddr *)&client_addr, (socklen_t *)&client_size)) < 0)
-            {
-                puts("failed to accept connection");
-                printf("Error: %s\n", strerror(errno));
-                continue;
-            };
-            inet_ntop(AF_INET, &client_addr.sin_addr, s, sizeof(client_addr));
-            printf("client from %s:%d connected\n", s, ntohs(client_addr.sin_port));
+    if (bind(sockfd, (struct sockaddr*)&server, sizeof(server)) < 0) {
+        puts("bind failed");
+        printf("Error: %s\n", strerror(errno));
+        return -1;
+    }
 
-            int *conn_fd_p = malloc(1);
-            *conn_fd_p = conn_fd[i];
-            serve(conn_fd_p);
-            return 0;
+    puts("Successfully binded");
+    
+    listen(sockfd, 1);
+
+    long long cnt = 0;
+
+    struct sockaddr_in client_addr;
+    while (1) {
+        char s[20]; int client_size;
+        client_size = sizeof(client_addr);
+        if ((conn_fd = accept(sockfd, (struct sockaddr*)&client_addr, (socklen_t*)&client_size)) < 0) {
+            puts("failed to accept connection");
+            printf("Error: %s\n", strerror(errno));
+            continue;
+        };
+        inet_ntop(AF_INET, &client_addr.sin_addr, s, sizeof(client_addr));
+        printf("client from %s:%d connected\n", s, ntohs(client_addr.sin_port));
+
+        int len;
+        while (cnt < BLK_CNT * BLK_SIZE) {
+            len = read(conn_fd, buffer, BLK_SIZE);
+            cnt += len;
         }
+        write(conn_fd, "OK", 2);
+        printf("transmission done\n");
+        close(conn_fd);
+        printf("connection done\n");
     }
     
-    for (int i=0;i!=NUM_THREADS;++i) {
-        int status;
-        wait(&status);
-    }
 }
\ No newline at end of file
diff --git a/tcp_tput.h b/tcp_tput.h
index e5c4e62..5894ae8 100644
--- a/tcp_tput.h
+++ b/tcp_tput.h
@@ -1,28 +1,10 @@
 #ifndef TCP_TPUT
 #define TCP_TPUT
 
-#include <errno.h>
-#include <sys/wait.h>
-#include <signal.h>
-#include <unistd.h>
-#include <net/if.h>
-#include <stdlib.h>
-#include <pthread.h>
-#include <time.h>
-#include <unistd.h>
-#include <stdio.h>
-#include <string.h>
-#include <sys/socket.h>
-#include <netinet/in.h>
-#include <netinet/ip.h>
-#include <arpa/inet.h>
+#define SERVER_ADDR "192.168.2.2"
+#define SERVER_PORT 6664
 
-#define SERVER_ADDR "192.168.2.1"
-#define SERVER_PORT 8888
-
-#define NUM_THREADS 1LL
-
-#define BLK_SIZE (1LL<<20)
+#define BLK_SIZE (1LL<<25)
 #define BLK_CNT (1LL<<11)
 
 #endif
\ No newline at end of file
